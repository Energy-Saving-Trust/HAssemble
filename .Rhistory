library(HAssemble)
library(HAssemble)
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(HAssemble)
library(HAssemble)
roxygenise()
library(HAssemble)
geog <- c('BLOCK_ID', 'OS_TOPO_TOID', 'COA', 'LSOA', "POSTCODE", "POSTCODE_SECTOR")
length(geog)
#Write small function wrapper for the loop so we can plant anywhere we like
neigh_meas <- function(df, var, geogs = NULL, ptype = PTYPE_SUBGROUP) {
if(is.null(geogs)){
geogs = c('BLOCK_ID', 'OS_TOPO_TOID', 'COA', 'LSOA', "POSTCODE", "POSTCODE_SECTOR")
}
# Doesnt play well with factors in the geogsraphy columns so we're going to flag up a need to change the data types
column_classes <- sapply(df[geogs], class)
if (any(column_classes == "factor")) {
stop(paste0("Function stopped: One or more of the neighbhourhood measure columns are factors. Convert ", paste(geogs, collapse = ", "), " to character for stability."))
}
# Grab the data table input name
input_df_name <- deparse(substitute(df))
for (i in 1:length(geogs)){
#Assing variable name for a table based on i
print(paste0("Doing geographic area number ", i, " for: ", {{var}}))
name = paste0({{var}}, "_", geogs[i])
print(paste0("First gather of data for ", geogs[i], " and ", {{var}}))
}
}
library(HAssemble)
library(HAssemble)
library(HAssemble)
library(HAssemble)
library(fst)
EPCs_age_band <- read_fst("C:/Users/david.grady/Data/result_fst.fst", c("UPRN", "CONSTRUCTION_AGE_BAND")) # read selection of columns
View(EPCs_age_band)
dist <- EPCs_age_band %>% distinct(UPRN, .keep_all = T)
library(tidyverse)
dist <- EPCs_age_band %>% distinct(UPRN, .keep_all = T)
table(dist$CONSTRUCTION_AGE_BAND)
table <- table(dist$CONSTRUCTION_AGE_BAND)
table <- as.data.frame(table)
View(table)
write.csv(table, "C:/Users/david.grady/Data/EPCs_Ages_EW_EPC.csv", row.names = FALSE)
library(fst)
EPCs_age_band <- read_fst("C:/Users/david.grady/Data/result_fst.fst", c("UPRN", "CONSTRUCTION_AGE_BAND")) # read selection of columns
if (!"FLOOR_DETAILS_2" %in% colnames(EPCs_age_band)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
library(tidyverse)
if (!"FLOOR_DETAILS_2" %in% colnames(EPCs_age_band)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
if (!"FLOOR_DETAILS_2" %in% colnames(EPCs_age_band)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = "test")
}
if (!"FLOOR_DETAILS_2" %in% colnames(EPCs_age_band)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
if (!"FLOOR_DETAILS_2" %in% colnames(test)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
if (!"FLOOR_DETAILS_2" %in% colnames(test)) {
test <- EPCs_age_band %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
if (!"FLOOR_DETAILS_2" %in% colnames(test)) {
test <- test %>%
mutate(FLOOR_DETAILS_2 = NA_character_)
}
if (!"FLOOR_DETAILS_2" %in% colnames(test)) {
test <- test %>%
mutate(FLOOR_DETAILS_2 = "NA_character_")
}
if (!"FLOOR_DETAILS_2" %in% colnames(test)) {
test <- test %>%
mutate(FLOOR_DETAILS_2 = "test")
}
gc()
warnings()
sql_string <- "R_ADDRBASE_PLUS_20231014"
# Convert the vector of country values into a comma-separated string
country_values <- paste0("'", "J", "'", collapse = ", ")
# Construct the SQL query string for IN operator
country_filter <- paste0("COUNTRY IN (", country_values, ")")
sql_query <- paste0("SELECT UPRN, UDPRN, SUB_BUILDING_NAME, BUILDING_NAME, BUILDING_NUMBER, SAO_START_NUMBER, SAO_TEXT, PAO_START_NUMBER,
PAO_START_SUFFIX, PAO_TEXT, STREET_DESCRIPTION, TOWN_NAME, ADMINISTRATIVE_AREA, POSTCODE_LOCATOR, COUNTRY FROM dbo.",
sql_string,
" WHERE
", country_filter, "AND (CLASS LIKE 'R%' OR CLASS LIKE 'X%');")
#Read in master addresses
# TODO FIX THIS
connect = odbcConnect('EST_RefData_30_Presentation')
library(RODBC)
sql_string <- "R_ADDRBASE_PLUS_20231014"
# Convert the vector of country values into a comma-separated string
country_values <- paste0("'", "J", "'", collapse = ", ")
# Construct the SQL query string for IN operator
country_filter <- paste0("COUNTRY IN (", country_values, ")")
sql_query <- paste0("SELECT UPRN, UDPRN, SUB_BUILDING_NAME, BUILDING_NAME, BUILDING_NUMBER, SAO_START_NUMBER, SAO_TEXT, PAO_START_NUMBER,
PAO_START_SUFFIX, PAO_TEXT, STREET_DESCRIPTION, TOWN_NAME, ADMINISTRATIVE_AREA, POSTCODE_LOCATOR, COUNTRY FROM dbo.",
sql_string,
" WHERE
", country_filter, "AND (CLASS LIKE 'R%' OR CLASS LIKE 'X%');")
#Read in master addresses
# TODO FIX THIS
connect = odbcConnect('EST_RefData_30_Presentation')
master = sqlQuery(connect, sql_query)
sql_string <- "R_ADDRBASE_PLUS_20231014"
# Convert the vector of country values into a comma-separated string
country_values <- paste0("'", c("J", W), "'", collapse = ", ")
sql_string <- "R_ADDRBASE_PLUS_20231014"
# Convert the vector of country values into a comma-separated string
country_values <- paste0("'", c("J", "W"), "'", collapse = ", ")
# Construct the SQL query string for IN operator
country_filter <- paste0("COUNTRY IN (", country_values, ")")
sql_query <- paste0("SELECT UPRN, UDPRN, SUB_BUILDING_NAME, BUILDING_NAME, BUILDING_NUMBER, SAO_START_NUMBER, SAO_TEXT, PAO_START_NUMBER,
PAO_START_SUFFIX, PAO_TEXT, STREET_DESCRIPTION, TOWN_NAME, ADMINISTRATIVE_AREA, POSTCODE_LOCATOR, COUNTRY FROM dbo.",
sql_string,
" WHERE
", country_filter, "AND (CLASS LIKE 'R%' OR CLASS LIKE 'X%');")
#Read in master addresses
# TODO FIX THIS
connect = odbcConnect('EST_RefData_30_Presentation')
master = sqlQuery(connect, sql_query)
sql_string <- "R_ADDRBASE_PLUS_20231014"
country = c("J", "W")
# Convert the vector of country values into a comma-separated string
country_values <- paste0("'", country, "'", collapse = ", ")
# Construct the SQL query string for IN operator
country_filter <- paste0("COUNTRY IN (", country_values, ")")
sql_query <- paste0("SELECT UPRN, UDPRN, SUB_BUILDING_NAME, BUILDING_NAME, BUILDING_NUMBER, SAO_START_NUMBER, SAO_TEXT, PAO_START_NUMBER,
PAO_START_SUFFIX, PAO_TEXT, STREET_DESCRIPTION, TOWN_NAME, ADMINISTRATIVE_AREA, POSTCODE_LOCATOR, COUNTRY FROM dbo.",
sql_string,
" WHERE
", country_filter, "AND (CLASS LIKE 'R%' OR CLASS LIKE 'X%');")
#Read in master addresses
# TODO FIX THIS
connect = odbcConnect('EST_RefData_30_Presentation')
master = sqlQuery(connect, sql_query)
country_values
